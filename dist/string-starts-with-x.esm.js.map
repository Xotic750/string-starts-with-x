{"version":3,"sources":["../src/string-starts-with-x.js"],"names":[],"mappings":"AAAA,OAAO,OAAP,MAAoB,WAApB;AACA,OAAO,SAAP,MAAsB,cAAtB;AACA,OAAO,sBAAP,MAAmC,4BAAnC;AACA,OAAO,KAAP,MAAkB,aAAlB;AACA,OAAO,QAAP,MAAqB,aAArB;AAEA,IAAM,OAAO,GAAG,8CAAhB;AACA,IAAM,EAAE,GAAG,OAAO,CAAC,UAAnB;AACA,IAAM,gBAAgB,GAAG,OAAO,EAAP,KAAc,UAAd,IAA4B,EAArD;AAEA,IAAI,SAAJ;;AAEA,IAAI,gBAAJ,EAAsB;AACpB,MAAI,GAAG,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,EAAoB,gBAApB,EAAsC,GAAtC,CAAV;AACA,EAAA,SAAS,GAAG,GAAG,CAAC,KAAhB;;AAEA,MAAI,SAAJ,EAAe;AACb,IAAA,GAAG,GAAG,OAAO,CAAC,IAAR,CAAa,KAAb,EAAoB,gBAApB,EAAsC,GAAtC,EAA2C,IAAI,CAA/C,CAAN;AACA,IAAA,SAAS,GAAG,GAAG,CAAC,KAAJ,KAAc,KAAd,IAAuB,GAAG,CAAC,KAAJ,KAAc,KAAjD;AACD;;AAED,MAAI,SAAJ,EAAe;AACb,IAAA,GAAG,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,EAAkB,gBAAlB,EAAoC,GAApC,CAAN;AACA,IAAA,SAAS,GAAG,GAAG,CAAC,KAAJ,KAAc,KAAd,IAAuB,GAAG,CAAC,KAAJ,KAAc,IAAjD;AACD;;AAED,MAAI,SAAJ,EAAe;AACb,IAAA,GAAG,GAAG,OAAO,CAAC,IAAR,CAAa,IAAb,EAAmB,gBAAnB,EAAqC,GAArC,CAAN;AACA,IAAA,SAAS,GAAG,GAAG,CAAC,KAAhB;AACD;AACF;AAED;;;;;;;;;;;;;AAWA,IAAI,WAAJ;;AAEA,IAAI,SAAJ,EAAe;AACb,EAAA,WAAW,GAAG,SAAS,UAAT,CAAoB,MAApB,EAA4B,YAA5B,EAA0C;AACtD,QAAM,GAAG,GAAG,sBAAsB,CAAC,MAAD,CAAlC;;AAEA,QAAI,QAAQ,CAAC,YAAD,CAAZ,EAA4B;AAC1B,YAAM,IAAI,SAAJ,CAAc,OAAd,CAAN;AACD;;AAED,QAAM,IAAI,GAAG,CAAC,YAAD,CAAb;;AAEA,QAAI,SAAS,CAAC,MAAV,GAAmB,CAAvB,EAA0B;AACxB;AACA,MAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,SAAS,CAAC,CAAD,CAAnB;AACD;;AAED,WAAO,gBAAgB,CAAC,KAAjB,CAAuB,GAAvB,EAA4B,IAA5B,CAAP;AACD,GAfD;AAgBD,CAjBD,MAiBO;AACL;AACA,EAAA,WAAW,GAAG,SAAS,UAAT,CAAoB,MAApB,EAA4B,YAA5B,EAA0C;AACtD,QAAM,GAAG,GAAG,KAAK,CAAC,sBAAsB,CAAC,MAAD,CAAvB,CAAjB;;AAEA,QAAI,QAAQ,CAAC,YAAD,CAAZ,EAA4B;AAC1B,YAAM,IAAI,SAAJ,CAAc,OAAd,CAAN;AACD;;AAED,QAAM,SAAS,GAAG,KAAK,CAAC,YAAD,CAAvB;AACA;;AACA,QAAM,QAAQ,GAAG,SAAS,CAAC,MAAV,GAAmB,CAAnB,GAAuB,SAAS,CAAC,SAAS,CAAC,CAAD,CAAV,CAAhC,GAAiD,CAAlE;AACA,QAAM,KAAK,GAAG,QAAQ,GAAG,CAAX,GAAe,QAAf,GAA0B,CAAxC;AAEA,WAAO,GAAG,CAAC,KAAJ,CAAU,KAAV,EAAiB,KAAK,GAAG,SAAS,CAAC,MAAnC,MAA+C,SAAtD;AACD,GAbD;AAcD;;AAED,IAAM,GAAG,GAAG,WAAZ;AAEA,eAAe,GAAf","file":"string-starts-with-x.esm.js","sourcesContent":["import attempt from 'attempt-x';\nimport toInteger from 'to-integer-x';\nimport requireObjectCoercible from 'require-object-coercible-x';\nimport toStr from 'to-string-x';\nimport isRegExp from 'is-regexp-x';\n\nconst ERR_MSG = 'Cannot call method \"startsWith\" with a regex';\nconst sw = ERR_MSG.startsWith;\nconst nativeStartsWith = typeof sw === 'function' && sw;\n\nlet isWorking;\n\nif (nativeStartsWith) {\n  let res = attempt.call('/a/', nativeStartsWith, /a/);\n  isWorking = res.threw;\n\n  if (isWorking) {\n    res = attempt.call('abc', nativeStartsWith, 'a', 1 / 0);\n    isWorking = res.threw === false && res.value === false;\n  }\n\n  if (isWorking) {\n    res = attempt.call(123, nativeStartsWith, '1');\n    isWorking = res.threw === false && res.value === true;\n  }\n\n  if (isWorking) {\n    res = attempt.call(null, nativeStartsWith, 'n');\n    isWorking = res.threw;\n  }\n}\n\n/**\n * This method determines whether a string begins with the characters of a\n * specified string, returning true or false as appropriate.\n *\n * @param {string} string - The string to be search.\n * @throws {TypeError} If string is null or undefined.\n * @param {string} searchString - The characters to be searched for at the start of this string.\n * @throws {TypeError} If searchString is a RegExp.\n * @param {number} [position] -The position in this string at which to begin searching for searchString; defaults to 0.\n * @returns {boolean} `true` if the given characters are found at the beginning of the string; otherwise, `false`.\n */\nlet $startsWith;\n\nif (isWorking) {\n  $startsWith = function startsWith(string, searchString) {\n    const str = requireObjectCoercible(string);\n\n    if (isRegExp(searchString)) {\n      throw new TypeError(ERR_MSG);\n    }\n\n    const args = [searchString];\n\n    if (arguments.length > 2) {\n      /* eslint-disable-next-line prefer-rest-params,prefer-destructuring */\n      args[1] = arguments[2];\n    }\n\n    return nativeStartsWith.apply(str, args);\n  };\n} else {\n  // Firefox (< 37?) and IE 11 TP have a noncompliant startsWith implementation\n  $startsWith = function startsWith(string, searchString) {\n    const str = toStr(requireObjectCoercible(string));\n\n    if (isRegExp(searchString)) {\n      throw new TypeError(ERR_MSG);\n    }\n\n    const searchStr = toStr(searchString);\n    /* eslint-disable-next-line prefer-rest-params */\n    const position = arguments.length > 2 ? toInteger(arguments[2]) : 0;\n    const start = position > 0 ? position : 0;\n\n    return str.slice(start, start + searchStr.length) === searchStr;\n  };\n}\n\nconst ssw = $startsWith;\n\nexport default ssw;\n"]}