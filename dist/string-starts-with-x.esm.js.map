{"version":3,"sources":["../src/string-starts-with-x.js"],"names":[],"mappings":"AAAA,OAAO,OAAP,MAAoB,WAApB;AACA,OAAO,SAAP,MAAsB,cAAtB;AACA,OAAO,sBAAP,MAAmC,4BAAnC;AACA,OAAO,KAAP,MAAkB,aAAlB;AACA,OAAO,QAAP,MAAqB,aAArB;AACA,OAAO,SAAP,MAAsB,cAAtB;AACA,OAAO,SAAP,MAAsB,oBAAtB;AAEA,IAAM,OAAO,GAAG,8CAAhB;AACA,IAAM,EAAE,GAAG,OAAO,CAAC,UAAnB;AACA,IAAM,oBAAoB,GAAG,OAAO,EAAP,KAAc,UAAd,IAA4B,SAAS,CAAC,EAAD,CAAlE;;AAEA,IAAM,KAAK,GAAG,SAAS,KAAT,GAAiB;AAC7B,SAAO,OAAO,CAAC,oBAAD,EAAuB,KAAvB,EAA8B,GAA9B,CAAP,CAA0C,KAAjD;AACD,CAFD;;AAIA,IAAM,KAAK,GAAG,SAAS,KAAT,GAAiB;AAC7B,MAAM,GAAG,GAAG,OAAO,CAAC,oBAAD,EAAuB,KAAvB,EAA8B,GAA9B,EAAmC,IAAI,CAAvC,CAAnB;AAEA,SAAO,GAAG,CAAC,KAAJ,KAAc,KAAd,IAAuB,GAAG,CAAC,KAAJ,KAAc,KAA5C;AACD,CAJD;;AAMA,IAAM,KAAK,GAAG,SAAS,KAAT,GAAiB;AAC7B,MAAM,GAAG,GAAG,OAAO,CAAC,oBAAD,EAAuB,GAAvB,EAA4B,GAA5B,CAAnB;AAEA,SAAO,GAAG,CAAC,KAAJ,KAAc,KAAd,IAAuB,GAAG,CAAC,KAAJ,KAAc,IAA5C;AACD,CAJD;;AAMA,IAAM,KAAK,GAAG,SAAS,KAAT,GAAiB;AAC7B,SAAO,OAAO,CAAC,oBAAD,EAAuB,IAAvB,EAA6B,GAA7B,CAAP,CAAyC,KAAhD;AACD,CAFD;;AAIA,IAAM,SAAS,GAAG,SAAS,CAAC,oBAAD,CAAT,IAAmC,KAAK,EAAxC,IAA8C,KAAK,EAAnD,IAAyD,KAAK,EAA9D,IAAoE,KAAK,EAA3F;;AAEA,IAAM,iBAAiB,GAAG,SAAS,UAAT,CAAoB,MAApB,EAA4B,YAA5B,EAA0C;AAClE,MAAM,GAAG,GAAG,sBAAsB,CAAC,MAAD,CAAlC;;AAEA,MAAI,QAAQ,CAAC,YAAD,CAAZ,EAA4B;AAC1B,UAAM,IAAI,SAAJ,CAAc,OAAd,CAAN;AACD;AAED;;;AACA,SAAO,oBAAoB,CAAC,GAAD,EAAM,YAAN,EAAoB,SAAS,CAAC,CAAD,CAA7B,CAA3B;AACD,CATD,C,CAWA;;;AACA,OAAO,IAAM,cAAc,GAAG,SAAS,UAAT,CAAoB,MAApB,EAA4B,YAA5B,EAA0C;AACtE,MAAM,GAAG,GAAG,KAAK,CAAC,sBAAsB,CAAC,MAAD,CAAvB,CAAjB;;AAEA,MAAI,QAAQ,CAAC,YAAD,CAAZ,EAA4B;AAC1B,UAAM,IAAI,SAAJ,CAAc,OAAd,CAAN;AACD;;AAED,MAAM,SAAS,GAAG,KAAK,CAAC,YAAD,CAAvB;AACA;;AACA,MAAM,QAAQ,GAAG,SAAS,CAAC,MAAV,GAAmB,CAAnB,GAAuB,SAAS,CAAC,SAAS,CAAC,CAAD,CAAV,CAAhC,GAAiD,CAAlE;AACA,MAAM,KAAK,GAAG,QAAQ,GAAG,CAAX,GAAe,QAAf,GAA0B,CAAxC;AAEA,SAAO,GAAG,CAAC,KAAJ,CAAU,KAAV,EAAiB,KAAK,GAAG,SAAS,CAAC,MAAnC,MAA+C,SAAtD;AACD,CAbM;AAeP;;;;;;;;;;;;AAWA,IAAM,WAAW,GAAG,SAAS,GAAG,iBAAH,GAAuB,cAApD;AAEA,eAAe,WAAf","file":"string-starts-with-x.esm.js","sourcesContent":["import attempt from 'attempt-x';\nimport toInteger from 'to-integer-x';\nimport requireObjectCoercible from 'require-object-coercible-x';\nimport toStr from 'to-string-x';\nimport isRegExp from 'is-regexp-x';\nimport toBoolean from 'to-boolean-x';\nimport methodize from 'simple-methodize-x';\n\nconst ERR_MSG = 'Cannot call method \"startsWith\" with a regex';\nconst sw = ERR_MSG.startsWith;\nconst methodizedStartsWith = typeof sw === 'function' && methodize(sw);\n\nconst test1 = function test1() {\n  return attempt(methodizedStartsWith, '/a/', /a/).threw;\n};\n\nconst test2 = function test2() {\n  const res = attempt(methodizedStartsWith, 'abc', 'a', 1 / 0);\n\n  return res.threw === false && res.value === false;\n};\n\nconst test3 = function test3() {\n  const res = attempt(methodizedStartsWith, 123, '1');\n\n  return res.threw === false && res.value === true;\n};\n\nconst test4 = function test4() {\n  return attempt(methodizedStartsWith, null, 'n').threw;\n};\n\nconst isWorking = toBoolean(methodizedStartsWith) && test1() && test2() && test3() && test4();\n\nconst patchedStartsWith = function startsWith(string, searchString) {\n  const str = requireObjectCoercible(string);\n\n  if (isRegExp(searchString)) {\n    throw new TypeError(ERR_MSG);\n  }\n\n  /* eslint-disable-next-line prefer-rest-params */\n  return methodizedStartsWith(str, searchString, arguments[2]);\n};\n\n// Firefox (< 37?) and IE 11 TP have a non-compliant startsWith implementation\nexport const implementation = function startsWith(string, searchString) {\n  const str = toStr(requireObjectCoercible(string));\n\n  if (isRegExp(searchString)) {\n    throw new TypeError(ERR_MSG);\n  }\n\n  const searchStr = toStr(searchString);\n  /* eslint-disable-next-line prefer-rest-params */\n  const position = arguments.length > 2 ? toInteger(arguments[2]) : 0;\n  const start = position > 0 ? position : 0;\n\n  return str.slice(start, start + searchStr.length) === searchStr;\n};\n\n/**\n * This method determines whether a string begins with the characters of a\n * specified string, returning true or false as appropriate.\n *\n * @param {string} string - The string to be search.\n * @throws {TypeError} If string is null or undefined.\n * @param {string} searchString - The characters to be searched for at the start of this string.\n * @throws {TypeError} If searchString is a RegExp.\n * @param {number} [position] -The position in this string at which to begin searching for searchString; defaults to 0.\n * @returns {boolean} `true` if the given characters are found at the beginning of the string; otherwise, `false`.\n */\nconst $startsWith = isWorking ? patchedStartsWith : implementation;\n\nexport default $startsWith;\n"]}