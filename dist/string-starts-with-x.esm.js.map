{"version":3,"sources":["../src/string-starts-with-x.js"],"names":[],"mappings":"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","file":"string-starts-with-x.esm.js","sourcesContent":["import attempt from 'attempt-x';\nimport toInteger from 'to-integer-x';\nimport requireObjectCoercible from 'require-object-coercible-x';\nimport toStr from 'to-string-x';\nimport isRegExp from 'is-regexp-x';\nimport toBoolean from 'to-boolean-x';\n\nconst ERR_MSG = 'Cannot call method \"startsWith\" with a regex';\nconst sw = ERR_MSG.startsWith;\nconst nativeStartsWith = typeof sw === 'function' && sw;\n\nconst test1 = function test1() {\n  return attempt.call('/a/', nativeStartsWith, /a/).threw;\n};\n\nconst test2 = function test2() {\n  const res = attempt.call('abc', nativeStartsWith, 'a', 1 / 0);\n\n  return res.threw === false && res.value === false;\n};\n\nconst test3 = function test3() {\n  const res = attempt.call(123, nativeStartsWith, '1');\n\n  return res.threw === false && res.value === true;\n};\n\nconst test4 = function test4() {\n  return attempt.call(null, nativeStartsWith, 'n').threw;\n};\n\nconst isWorking = toBoolean(nativeStartsWith) && test1() && test2() && test3() && test4();\n\nconst patchedStartsWith = function patchedStartsWith() {\n  return function startsWith(string, searchString) {\n    const str = requireObjectCoercible(string);\n\n    if (isRegExp(searchString)) {\n      throw new TypeError(ERR_MSG);\n    }\n\n    const args = [searchString];\n\n    if (arguments.length > 2) {\n      /* eslint-disable-next-line prefer-rest-params,prefer-destructuring */\n      args[1] = arguments[2];\n    }\n\n    return nativeStartsWith.apply(str, args);\n  };\n};\n\nexport const implementation = function implementation() {\n  // Firefox (< 37?) and IE 11 TP have a non-compliant startsWith implementation\n  return function startsWith(string, searchString) {\n    const str = toStr(requireObjectCoercible(string));\n\n    if (isRegExp(searchString)) {\n      throw new TypeError(ERR_MSG);\n    }\n\n    const searchStr = toStr(searchString);\n    /* eslint-disable-next-line prefer-rest-params */\n    const position = arguments.length > 2 ? toInteger(arguments[2]) : 0;\n    const start = position > 0 ? position : 0;\n\n    return str.slice(start, start + searchStr.length) === searchStr;\n  };\n};\n\n/**\n * This method determines whether a string begins with the characters of a\n * specified string, returning true or false as appropriate.\n *\n * @param {string} string - The string to be search.\n * @throws {TypeError} If string is null or undefined.\n * @param {string} searchString - The characters to be searched for at the start of this string.\n * @throws {TypeError} If searchString is a RegExp.\n * @param {number} [position] -The position in this string at which to begin searching for searchString; defaults to 0.\n * @returns {boolean} `true` if the given characters are found at the beginning of the string; otherwise, `false`.\n */\nconst $startsWith = isWorking ? patchedStartsWith() : implementation();\n\nexport default $startsWith;\n"]}